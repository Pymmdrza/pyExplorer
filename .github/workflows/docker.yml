name: Docker Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Hub Login (Optional but Recommended)
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Tag Docker Image
        run: |
          IMAGE_NAME=pymmdrza/pyExplorer
          IMAGE_TAG=latest
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Load Docker Image from Build Job
        run: docker load -i <(docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }})

      - name: Run Docker Container
        run: |
          CONTAINER_ID=$(docker run -d -p 5000:5000 ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }})
          echo "CONTAINER_ID=${CONTAINER_ID}" >> $GITHUB_ENV
          sleep 10

      - name: Health Check (Example - Customize based on your app)
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/)
          if [[ "$STATUS_CODE" -ne 200 ]]; then
            echo "Health check failed. Status code: $STATUS_CODE"
            docker logs ${{ env.CONTAINER_ID }}
            exit 1
          else
            echo "Health check successful."
          fi

      - name: Stop and Remove Container
        if: always()
        run: docker stop ${{ env.CONTAINER_ID }} && docker rm ${{ env.CONTAINER_ID }}

  push:
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'

    steps:
      - name: Docker Hub Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load Docker Image from Build Job
        run: docker load -i <(docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }})

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
